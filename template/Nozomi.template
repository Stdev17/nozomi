using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Runtime.Serialization;

using Fiveminlab.Newtonsoft.Json;
using Fiveminlab.Newtonsoft.Json.Converters;

using MessagePack;

namespace {{namespace}}
{
    public class {{rootName}}
    {
        {{#classes}}
        {{#flag.class}}
        [MessagePackObject]
        public class {{className}}
        {
            {{#members}}
            {{#flag.enum}}
            [IgnoreMember]
            [JsonIgnore]
            public {{&type}} {{name}}
            {
                get
                {
                    return {{&type}}.Get(__raw_{{name}});
                }
                set
                {
                    __raw_{{name}} = value.ToString();
                }
            }

            [KeyAttribute("{{name}}")]
            [JsonProperty("{{name}}")]
            public string __raw_{{name}};
            {{/flag.enum}}
            {{^flag.enum}}
            [KeyAttribute("{{name}}")]
            [JsonProperty("{{name}}")]
            public {{&type}} {{name}};
            {{/flag.enum}}
            {{/members}}
        }
        {{/flag.class}}
        {{#flag.enum}}
        [MessagePackObject]
        public class {{className}}
        {
            readonly string _value;
            public {{className}}()
            {

            }
            public {{className}}(string value)
            {
                this._value = value;
            }
            public override string ToString()
            {
                return this._value;
            }
            public static implicit operator string({{className}} d)
            {
                return d._value;
            }
            public static implicit operator {{className}}(string d)
            {
                return new {{className}}(d);
            }

            {{#members}}
            public static {{className}} {{type}} = new {{className}}("{{name}}");
            {{/members}}

            public static {{className}} Get(string key)
            {
                switch (key)
                {
                    {{#members}}
                    case "{{name}}":
                        return {{type}};
                    {{/members}}
                    default:
                        throw new InvalidOperationException("Enum invalid operator");
                }
            }
        }
        {{/flag.enum}}
        {{/classes}}
    }

    public partial class BaseRequestHandler
    {
        {{#method}}
        public virtual async Task<{{&resp}}> {{rootName}}({{&req}} req)
        {
            var method = "{{method}}";
            var path = "{{&url}}";
            var task = await Handle<{{&req}}, {{&resp}}>(method, path, req);
            return task;
        }
        {{/method}}
    }
}
